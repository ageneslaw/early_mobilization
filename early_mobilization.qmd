---
title: "Early mobilization"
# bibliography: 
# csl: 
prefer-html: true
author: 
     - name: Andrew Geneslaw
       degrees:
          - MD
          - MS
       orcid: 0000-0003-1859-2369
       email: asg2195@cumc.columbia.edu
       affiliations:
        - name: Columbia University Irving Medical Center
          department: Department of Pediatrics
          city: New York
          state: NY
          country: USA
          postal-code: 10032
format: 
     html:
          code-fold: true
          toc: true
          crossrefs-hover: true
          citations-hover: true
          code-tools:
               source: true
               toggle: false
               caption: none
     gfm:
          codeBlock: true
          toc: true
          crossref-hover: true
          citation: true
          codeTools:
               source: true
               toggle: false
               caption: none 
     pdf:
          toc: true
          
execute:
     echo: true
     warning: false
     cache: true
     
editor_options: 
  chunk_output_type: inline
  
engine: knitr
---

# Early mobilization retrospective analysis

This project will assess the delivery of physical therapy to critically ill children at the Morgan Stanley Children's Hospital in New York City. We are interested in whether physical therapy is being delivered within 72 hours of admission to the PICU. Physical therapy within 72 hours will be referred to from here out as "Early mobilization" or EM.

# Initial setup

## Loading libraries and data paths

```{r}
#| label: setup

library(chonyepicdata)
library(tidyverse)
library(lubridate)
library(janitor)
library(stringr)
library(gtsummary)
library(kableExtra)

options(scipen = 3)

# Load configuration files. You may need to edit the file (located in a config folder) with your own filepath.
# Alternately you can just send in the correct filename.
load_config(yml_path = 'config/config.yml', useglobal = TRUE)
# data_path <- data_path_chony

```

## Loading patients, encounters and PICU start/stop times

A patient has a medical record number (MRN) which is persistent across time.

A unique patient MRN can have multiple encounters. An encounter is defined by the variable \code{PAT_ENC_CSN_ID}, which has been renamed \code{PAT_ENC} for easier typing throughout this project. A patient encounter is a distinct encounter with the CHONY hospital system. An encounter can be inpatient, outpatient, ED, virtual, or not even involve patient contact (such as an attempt to call a patient that fails). For the purposes of this project, all encounters are an inpatient hospitalization. All encounters will have a start and stop date.

During a given hospital encounter ("admission"), a patient may move between multiple inpatient locations. These involve floor locations, PICUs, and operative areas. It also includes "virtual" areas, such as changing locations to a radiology area during a portable x-ray. The patient does not physically move in these circumstances and so we will mostly ignore them.

Because a patient can move multiple times between floor and PICU locations, a given hospital encounter might have multiple PICU admissions. We will break hospital encounters into individual PICU encounters, and each get a unique ID.

```{r}
#| label: load-data

# load all encounters
df_encounters <- load_encounters(paste0(data_path, fname_encounter))

# Remove any encounters that were for less than 24 hours
df_encounters <- df_encounters %>% 
     filter((hospital_discharge_date - hospital_admission_date)/ddays(1) >= 1)

enc_valid <- df_encounters %>% distinct(enc_id) %>% pull()

# Now get a set of all PICU start/stop datetimes for these encounters
df_picu_startstop <- get_picu_intervals(paste0(data_path, fname_adt)) %>%
     arrange(mrn, enc_id, icu_start_date)

# Remove encounters that were less than 24 hours
df_picu_startstop <- df_picu_startstop %>% 
     filter(enc_id %in% enc_valid)

# Remove PICU episodes that were less than 24 hours
df_picu_startstop <- df_picu_startstop %>% 
     filter((icu_stop_date - icu_start_date)/ddays(1) >= 1)

# Only keep encounters with a PICU stay
picu_enc_id <- df_picu_startstop %>% pull(enc_id)
df_encounters <- df_encounters %>% filter(enc_id %in% picu_enc_id)

n_mrn <- distinct(df_picu_startstop, mrn) %>% nrow()
n_encounters <- distinct(df_picu_startstop, enc_id) %>% nrow()
n_picu <- distinct(df_picu_startstop, mrn, icu_start_date) %>% nrow() 

```

|     | PICU       | Encounters       | Patients  |
|-----|------------|------------------|-----------|
|     | `r n_picu` | `r n_encounters` | `r n_mrn` |

### Find CTICU patients

We will use admission to 9 Tower as a surrogate for cardiac ICU. There are better ways to do this using OR locations within 24 hours of admission but,in the meantime, this is the best we can do.

```{r}
#| label: determine CTICU

df_cardiac <- load_generic_flowsheet_rows(paste0(data_path, fname_adt),
                                          time_col = 'EFFECTIVE_TIME',
                                          var_col = 'DEPARTMENT_NAME',
                                          measure_col = 'EVENT_TYPE',
                                          varnames = 'MSCH 9 TOWER',
                                          rename_vars = 'cticu_event') %>%
     filter(cticu_event %in% c('admission', 'transfer in', 'transfer out', 'discharge')) %>%
     rename(enc_id = pat_enc_csn_id, adt_time = effective_time) %>%
     arrange(enc_id, adt_time) %>%
     distinct()

df_cardiac <- df_cardiac %>%
     mutate(cticu_start = if_else(cticu_event %in% c('admission', 'transfer in'), TRUE, FALSE),
            cticu_stop = if_else(cticu_event %in% c('discharge', 'transfer out'), TRUE, FALSE)) %>%
     group_by(enc_id) %>%
     mutate(cticu_start_date = if_else(cticu_start, adt_time, lag(adt_time)),
            cticu_stop_date = if_else(cticu_start, lead(adt_time), adt_time)) %>%
     ungroup() %>%
     distinct(enc_id, cticu_start_date, cticu_stop_date)

# Identify CTICU patients based on whether they overlapped with 9 Tower during the ICU admission. 
df_cticu_id <- inner_join(
     df_picu_startstop, df_cardiac,
     by = join_by(enc_id, overlaps(x$icu_start_date, x$icu_stop_date,
                                   y$cticu_start_date, y$cticu_stop_date))
     ) %>% 
     mutate(cticu = if_else(is.na(cticu_start_date), FALSE, TRUE)) %>% 
     select(enc_id, icu_start_date, cticu) %>% 
     distinct()

df_picu_startstop <- df_picu_startstop %>% 
     left_join(df_cticu_id) %>% 
     mutate(cticu = replace_na(cticu, FALSE)) 
                                    
display_tab1 <- tabyl(df_picu_startstop, cticu)
display_tab2 <- tabyl(distinct(df_picu_startstop, mrn, .keep_all = TRUE), cticu)

kable(display_tab1, 
      format = "markdown", 
      align = "c",
      caption = 'Total CTICU stays')

kable(display_tab2, 
      format = "markdown", 
      align = "c",
      caption = 'Total CTICU stays (unique patients)')
```

### Length of stay

Since we are interested primarily in mobilization within the first 72 hours of ICU hospitalization, we should determine how many patients stayed for this long.

```{r}
#| label: 72 hour LOS

df_picu_stats <- df_picu_startstop %>% 
     mutate(los_picu = (icu_stop_date - icu_start_date)/ddays(1),
            los_picu_3days = if_else(los_picu >= 3, TRUE, FALSE))

df_encounter_stats <- df_encounters %>% 
     mutate(los_hosp = (hospital_discharge_date - hospital_admission_date)/ddays(1),
            los_hosp_3days = if_else(los_hosp >=3, TRUE, FALSE))

df_picu_stats %>% ggplot(aes(x = los_picu, fill = cticu)) + 
     geom_histogram() + 
     scale_x_log10(n.breaks = 8) + 
     labs(x = 'Days (log10 axis)',
          y = 'N',
          title = 'PICU LOS')

df_temp_join <- df_picu_startstop %>% 
     group_by(enc_id) %>% filter(cticu == max(cticu)) %>% ungroup() %>% 
     distinct(enc_id, cticu)

df_encounter_stats %>% left_join(df_temp_join) %>% 
     ggplot(aes(x = los_hosp, fill = cticu)) + 
     geom_histogram() + 
     scale_x_log10(n.breaks = 8) + 
     labs(x = 'Days (log10 axis)',
          y = 'N',
          title = 'Hospital LOS')

df_picu_stats %>% tbl_summary(
     by = 'cticu',
     include = c('los_picu', 'los_picu_3days', 'cticu'),
     label = list(los_picu ~ 'PICU LOS (days), median [IQR]',
                  los_picu_3days ~ 'PICU LOS at least 3 days, n (%)'),
     digits = list(all_continuous() ~ 1),
     statistic = list(all_continuous() ~ '{median} [{p25}-{p75}]')) %>% 
     modify_spanning_header(all_stat_cols() ~ '**CTICU Admission**') %>% 
     add_p()

df_encounter_stats %>% left_join(df_temp_join) %>% 
     tbl_summary(
     by = 'cticu',
     include = c('los_hosp', 'los_hosp_3days', 'cticu'),
     label = list(los_hosp ~ 'Hospital LOS (days), median [IQR]',
                  los_hosp_3days ~ 'Hospital LOS at least 3 days, n (%)'),
     digits = list(all_continuous() ~ 1),
     statistic = list(all_continuous() ~ '{median} [{p25}-{p75}]')) %>% 
     modify_spanning_header(all_stat_cols() ~ '**CTICU Admission**') %>% 
     add_p()
     


```

## Invasive mechanical ventilation (IMV)

Understanding the numbers of patients receiving IMV, and the timing of IMV, is essential to the study.

First we will load data. This takes time, so we will separate it from other processing so it can be cached.

```{r}
#| label: load respiratory support

# Get ventilator data and just limit to patient encounters we are interested in
df_vent <- load_resp_support(paste0(data_path, fname_imv))
df_vent_wide <- clean_resp_support(df_vent)
df_resp_episodes <- classify_resp_support(df_vent_wide)

```

Now, we will get some counts.

```{r}
#| label: count IMV

# Only keep IMV data, and relabel each episode number
df_vent_episodes <- df_resp_episodes %>% filter(current_support == 'imv') %>%
     rename(vent_time_start = support_time_start,
            vent_time_stop = support_time_stop,
            vent_episode = support_episode) 

# Only keep vent episodes for at least 24 hours
df_vent_episodes <- df_vent_episodes %>% 
     filter(timediff >= hours(24)) %>% 
     group_by(enc_id) %>%
     arrange(vent_episode) %>%
     mutate(vent_episode = row_number()) %>%
     ungroup()

# Join based on encounter ID, and whether the intervals for (vent start, vent stop) and (icu start, icu stop) have any overlap. This ensures we include patients intubated in the ED or a procedural area
by <- join_by(enc_id, 
              overlaps(x$vent_time_start, x$vent_time_stop,
                       y$icu_start_date, y$icu_stop_date))

df_vent_episodes <- inner_join(df_vent_episodes, df_picu_startstop, by) %>%
     inner_join(df_encounters, by = c('mrn', 'enc_id')) %>% 
     relocate(mrn, enc_id)

# How many ventilator episodes, encounters, and among unique patients?
n_vent_ep <- df_vent_episodes %>% nrow()
n_vent_picu <- df_vent_episodes %>% distinct(icu_start_date) %>% nrow()
n_vent_mrn <- df_vent_episodes %>% distinct(mrn) %>% nrow()

display_array <- c(n_vent_ep, n_vent_picu, n_vent_mrn)
names(display_array) <- c('Episodes of IMV', 'PICU stays with IMV', 'Unique patients requiring IMV')

# display_table <- tibble(`Episodes of IMV` = n_vent_ep, 
       # `PICU stays with IMV` = n_vent_picu,
       # `Unique patients requiring IMV` = n_vent_mrn)

kable(display_array, 
      format = "markdown", 
      align = "c",
      caption = NULL,
      col.names = 'N')
```

### How is IMV different in the cardiac ICU?

The duration and initiation of IMV may be very different within the cardiac ICU. We should explore this.

```{r}
#| label: imv in the cardiac ICU

df_picu_startstop %>% left_join(df_vent_episodes) %>% 
     group_by(enc_id, icu_start_date) %>% 
     mutate(any_vent = if_else(any(!is.na(vent_time_start)), TRUE, FALSE)) %>% 
     ungroup() %>% 
     mutate(timediff = timediff/ddays(1)) %>% 
     tbl_summary(by = 'cticu',
                 include = c('cticu', 'any_vent', 'timediff'),
                 label = list(timediff ~ 'Duration of IMV (days)',
                              any_vent ~ 'Any IMV'),
                 statistic = all_continuous() ~ '{median} [{p25}-{p75}]',
                 digits = all_continuous() ~ 1,
                 missing = 'no') %>% 
     modify_spanning_header(all_stat_cols() ~ '**CTICU Admission**') %>% 
     add_p()
     

```

## Physical therapy

Physical therapy is logged in flowsheets. For the most part, the physical therapists log the total amount of time they worked. Some physical therapists also log the specific activities they performed (such as gait training, wheel chair training, etc). This may or may not be consistent and will need some QAing.

```{r}
#| label: load PT

df_pt <- read_delim(paste0(data_path, '/Report 8F - Physical Therapy.txt'),
                    delim = "|",
                    escape_double = FALSE,
                    col_types = cols(PAT_ENC_CSN_ID = col_character(),
                                     MRN = col_character(),
                                     FLOWSHEET_NAME = col_character(),
                                     MEASURE_VALUE = col_number(),
                                     RECORDED_TIME = col_datetime(format = "%Y-%m-%d %H:%M:%S")),
                    trim_ws = TRUE) %>%
     clean_names() %>%
     select(mrn, enc_id = pat_enc_csn_id, everything()) %>%
     mutate(across(where(is.character), str_to_lower)) %>%
     mutate(across(where(is.character), ~ str_remove_all(.x, '^r nyc '))) %>%
     mutate(across(where(is.character), ~ str_remove_all(.x, '^r rhb '))) %>%
     mutate(across(where(is.character), ~ str_remove_all(.x, '^rhb ')))

```

There is a kind of variable called "PT received on" which is where the PT entered the date they supposedly provided PT. However, they always log PT when provided and there are multiple instances of the incorrect date being logged (such as a date in the future). Because of this, we will only use the date at the time PT was logged, rather than what the therapist manually entered. If we do need to use it, the date is recorded as the number of days after 12/31/1840 (unclear why). To convert this to a date, you can use:

``` r
mutate(pt_received_on = days(pt_received_on) + ymd('1840-12-31'))
```

There are also many kinds flowsheet rows being documented on. Not all are really relevant to our purposes. They are:

```{r}
#| label: PT flowsheet types


# Print all flowsheet names
df_pt %>% distinct(flowsheet_name) %>% print(n=Inf) %>% 
     kable(format = 'markdown')

```

Most of these differentiate the amount of time spent on a given task. It's not always clear which of these are active versus passive in terms of participation of the patient. Some also seem irrelevant. We will dictate all of the relevant ones as:

-   therapeutic activity time entry

-   ip pt time calculation

-   pt re-evaluation time entry

-   gait training time entry

-   neuromuscular re-education time entry

-   self care/home management (adls) time entry

-   therapeutic exercise time entry

-   therapeutic activity comments

-   therapeutic exercise comments

-   gait training comments

-   manual therapy time entry

-   orthotic/prosthetic management and/or training time entry

-   wheelchair management time entry

-   pt eval treat tolerance

-   prosthetic training time entry

-   therapeutic massage time entry

(It might seem odd that we are keeping "comments." The reason is that in a subsequentstep, we enforce that only numeric values are retained. Often the amount of time spent is erroneously entered as a "comment" so we will keep these.)

In the next step, we save all of these types of PT as a wide format data frame. Now we have access to each type of PT in case we need it for later.

The variable `ip_pt_time_calculation` appears to be the total of all other types of PT being provided. The other units specify the PT being provided, which all sum to this variable. Therefore `ip_pt_time_calculation` is the most important variable here and the one we will use as the basis for how much PT is provided.

```{r}
#| label: PT types

# Relevant types of PT rows...
relevant_pt <- c('therapeutic activity time entry',
                 'ip pt time calculation',
                 # 'pt received on',
                 'pt re-evaluation time entry',
                 'gait training time entry',
                 'neuromuscular re-education time entry',
                 'self care/home management (adls) time entry',
                 'therapeutic exercise time entry',
                 'therapeutic activity comments',
                 'therapeutic exercise comments',
                 # 'orthotic management training time entry',
                  'gait training comments',
                 # 'cognitive function direct pt contact',
                 'manual therapy time entry',
                 'orthotic/prosthetic management and/or training time entry',
                 # 'canalith repositioning time entry',
                 'wheelchair management time entry',
                 'pt eval treat tolerance',
                 # 'group therapy time entry',
                 'prosthetic training time entry',
                 'therapeutic massage time entry'
                 )
relevant_pt_str <- str_flatten(relevant_pt, collapse = '|')

# Keep only relevant kinds of PT
df_pt <- df_pt %>% filter(str_detect(flowsheet_name, relevant_pt_str))

# Make sure all types are numeric
df_pt <- df_pt %>% mutate(measure_value = as.numeric(measure_value))

# Remove any 0-time units
df_pt <- df_pt %>% filter(measure_value > 0)

# Convert to wide format
df_pt_wide <- df_pt %>%
     pivot_wider(id_cols = c('mrn', 'enc_id', 'recorded_time'),
                 names_from = flowsheet_name,
                 values_from = measure_value) %>%
     clean_names()

# Just keep a version with total time
df_pt_total <- df_pt_wide %>%
     select(mrn, enc_id, recorded_time, pt_time = ip_pt_time_calculation) %>% 
     distinct()

```

### Amount of PT

First we will describe, in general, how much PT is being delivered. We need to make sure that we only sum up PT that was delivered after the start of a PICU stay. To do this we take the `df_picu_startstop` data frame, which contains ICU admit and discharge times. Create a few windows of time spanning 0-24 hours, 24-48 hours, and 48-72 hours. Also create an interval that spans 0-72 hours.

```{r}
#| label: PT and PICU time joins

# Update the PICU start/stop so that it has a timestamp and intervals
# for 24, 48, and 72 hours
df_temp <- df_picu_startstop %>%
     mutate(t24 = icu_start_date + hours(24),
            t48 = icu_start_date + hours(48),
            t72 = icu_start_date + hours(72),
            int0_72 = interval(icu_start_date, t72),
            int0_24 = interval(icu_start_date, t24),
            int24_48 = interval(t24, t48),
            int48_72 = interval(t48, t72)
            )

# Label the 1st hospitalization
df_temp <- df_temp %>% 
     group_by(mrn, enc_id) %>% 
     arrange(mrn, enc_id, icu_start_date) %>% 
     mutate(icu_stay = row_number()) %>% 
     ungroup()

# Create an inequality join so we make sure to only match PT that occurred after
# the PICU start
pt_join_by <- join_by(mrn, enc_id, x$icu_start_date < y$recorded_time)
df_pt_picu <- left_join(df_temp, df_pt_total, by = pt_join_by, relationship = "many-to-many") %>% 
     relocate(mrn, enc_id, icu_stay, icu_start_date, icu_stop_date, recorded_time, pt_time)

# Only keep 1st hospitalization
# df_pt_picu <- df_pt_picu %>% filter(icu_stay == 1)

# Determine whether each episode of PT fell in a given interval
df_pt_timing <- df_pt_picu %>%
     mutate(early_pt = if_else(recorded_time %within% int0_72, TRUE, FALSE, FALSE),
            any_pt = if_else(recorded_time > icu_start_date, TRUE, FALSE, FALSE),
            icu_pt = if_else(recorded_time %within% interval(icu_start_date, icu_stop_date), TRUE, FALSE, FALSE),
            pt0_24 = if_else(recorded_time  %within% int0_24, TRUE, FALSE, FALSE),
            pt24_48 = if_else(recorded_time %within% int24_48, TRUE, FALSE, FALSE),
            pt48_72 = if_else(recorded_time %within% int48_72, TRUE, FALSE, FALSE))

# Get counts of PT in each interval.
df_pt_counts <- df_pt_timing %>%  
     group_by(mrn, enc_id, icu_start_date) %>% 
     summarize(n_early_pt = sum(early_pt), 
               n_icu_pt = sum(icu_pt), 
               n_any_pt = sum(any_pt), 
               n_pt0_24 = sum(pt0_24), 
               n_pt24_48 = sum(pt24_48), 
               n_pt48_72 = sum(pt48_72),
               n_pt_each = sum(if_else((pt0_24 & pt24_48) | (pt0_24 & pt48_72) | (pt24_48 & pt48_72), TRUE, FALSE)),
               .groups = 'drop') %>% 
     mutate(across(starts_with('n_'), ~ if_else(.x > 0, TRUE, FALSE)))

# Get aggregate time of PT delivered in each interval. Need to do this separately because they all have different denominators
df_early_pt_timesum <- df_pt_timing %>% 
     filter(early_pt) %>% 
     group_by(mrn, enc_id, icu_start_date) %>% 
     summarize(early_pt_time = sum(pt_time))

df_icu_pt_timesum <- df_pt_timing %>% 
     filter(icu_pt) %>% 
     group_by(mrn, enc_id, icu_start_date) %>% 
     summarize(icu_pt_time = sum(pt_time))

df_any_pt_timesum <- df_pt_timing %>% 
     filter(any_pt) %>% 
     group_by(mrn, enc_id, icu_start_date) %>% 
     summarize(any_pt_time = sum(pt_time))

# Bind the 3 times together. 
df_pt_timesums <- full_join(df_early_pt_timesum, df_icu_pt_timesum) %>% 
     full_join(df_any_pt_timesum)


```

Now let's display some findings. First, display counts of ICU stays involving PT at varying time points. Note that that the sum of PT in the 0-24, 24-48, and 42-72 hour ranges can sum to more than the number of patients who received early PT (0-72 hours). This is because a patient could receive PT multiple times in the early range, e.g. at 0-24 and 24-48 hours. They would be counted in each range, but only once total for the 0-72 hour range.

```{r}
#| label: display PT counts

# Now display tables of each.
df_pt_counts %>% 
     tbl_summary(include = starts_with('n_'),
                 label = list(n_early_pt ~ 'Early PT (within 72 hours)',
                              n_icu_pt ~ 'PT any time in the ICU',
                              n_any_pt ~ 'PT any time in the hospital',
                              n_pt0_24 ~ 'PT within 0-24 hours',
                              n_pt24_48 ~ 'PT within 24-48 hours',
                              n_pt48_72 ~ 'PT within 48-72 hours',
                              n_pt_each ~ 'Early PT on any 2 days'))


```

Next, display the amount of PT (in hours) that was received.

```{r}
#| label: display PT duration


df_pt_timesums %>% 
     tbl_summary(include = ends_with('_time'),
                 label = list(early_pt_time ~ 'Duration of PT within first 72 hours, minutes',
                              icu_pt_time ~ 'Duration of PT within ICU, minutes',
                              any_pt_time ~ 'Duration of PT within the hospital, minutes'),
                 missing = 'no',
                 statistic = list(all_continuous() ~ '{median} [{p25}-{p75}] - {N_nonmiss} patients'))

```

## IMV within 24 (and 72) hours of PICU hospitalization

Since PT is likely less commonly provided to patients during IMV, we should know which patients had IMV early in the PICU hospitalization. We can use the "df_temp" data frame that we created above since this already has 24 and 72 hour computations.

```{r}

#| label: early imv and PT comparison

# Get patients who had early (or not early) ventilation in the ICU
df_vent_temp <- df_vent_episodes %>% 
     select(mrn, enc_id, vent_episode, vent_time_start, vent_time_stop)

ventjoinby24 <- join_by(mrn, enc_id, overlaps(x$icu_start_date, x$t24,
                                            y$vent_time_start, y$vent_time_stop))

ventjoinby72 <- join_by(mrn, enc_id, overlaps(x$icu_start_date, x$t72,
                                            y$vent_time_start, y$vent_time_stop))

df_vent_temp24 <- inner_join(df_temp, df_vent_temp, by = ventjoinby24) %>% 
     mutate(vent24 = TRUE) %>% 
     select(mrn, enc_id, icu_start_date, icu_stop_date, vent24, vent_time_start, vent_time_stop) %>% 
     distinct()

df_vent_temp72 <- inner_join(df_temp, df_vent_temp, by = ventjoinby72) %>% 
     mutate(vent72 = TRUE) %>% 
     select(mrn, enc_id, icu_start_date, icu_stop_date, vent72, vent_time_start, vent_time_stop)%>% 
     distinct()

df_early_vent <- full_join(df_vent_temp24, df_vent_temp72) %>% 
     relocate(vent24, vent72, .after = enc_id) 

# Now add this into the PT record
df_pt_counts <- left_join(df_pt_counts, df_early_vent)%>% 
     mutate(vent24 = replace_na(vent24, FALSE),
            vent72 = replace_na(vent72, FALSE)) 

# Now display tables of each.
df_pt_counts %>% 
     tbl_summary(include = c('vent24', starts_with('n_')),
                 by = 'vent24',
                 label = list(n_early_pt ~ 'Early PT (within 72 hours)',
                              n_icu_pt ~ 'PT any time in the ICU',
                              n_any_pt ~ 'PT any time in the hospital',
                              n_pt0_24 ~ 'PT within 0-24 hours',
                              n_pt24_48 ~ 'PT within 24-48 hours',
                              n_pt48_72 ~ 'PT within 48-72 hours',
                              n_pt_each ~ 'Early PT on any 2 days')) %>% 
     modify_spanning_header(all_stat_cols() ~ '**IMV within first 24 hours of PICU**') %>% 
     add_p()

# Now display tables of each.
df_pt_counts %>% 
     tbl_summary(include = c('vent72', starts_with('n_')),
                 by = 'vent72',
                 label = list(n_early_pt ~ 'Early PT (within 72 hours)',
                              n_icu_pt ~ 'PT any time in the ICU',
                              n_any_pt ~ 'PT any time in the hospital',
                              n_pt0_24 ~ 'PT within 0-24 hours',
                              n_pt24_48 ~ 'PT within 24-48 hours',
                              n_pt48_72 ~ 'PT within 48-72 hours',
                              n_pt_each ~ 'Early PT on any 2 days')) %>% 
     modify_spanning_header(all_stat_cols() ~ '**IMV within first 72 hours of PICU**') %>% 
     add_p()


```

# Table 1

We will now begin generating some basic tables

Not used

```{r}
# tabyl(df_early_pt_firstpicu, early_pt)
# 
# # Now try to sum all the active types of PT
# df_pt_active <- df_pt_wide %>%
#      mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
#      mutate(pt_active_time = gait_training_time_entry + therapeutic_exercise_time_entry + wheelchair_management_time_entry +
#                  neuromuscular_re_education_time_entry + therapeutic_exercise_comments + gait_training_comments +
#                  orthotic_prosthetic_management_and_or_training_time_entry + prosthetic_training_time_entry) %>%
#      ungroup() %>%
#      select(mrn, enc_id, recorded_time, pt_active_time) %>%
#      filter(pt_active_time > 0)
# 
# # Do the same kind of inequality join as before, ensuring the PT is after PICU start
# df_pt_active_picu <- left_join(df_temp, df_pt_active, by = pt_join_by, relationship = "many-to-many")
# 
# # Determine whether patients had PT in each of the intervals
# df_early_pt_active <- df_pt_active_picu %>%
#      mutate(early_pt_active = if_else(recorded_time %within% int0_72, TRUE, FALSE)) %>%
#      group_by(mrn, enc_id, icu_start_date) %>%
#      filter(early_pt_active == max(early_pt_active)) %>%
#      ungroup() %>%
#      distinct(mrn, enc_id, icu_start_date, early_pt_active)
# 
# tabyl(df_early_pt_active, early_pt_active)

```

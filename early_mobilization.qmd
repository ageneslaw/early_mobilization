---
title: "Early mobilization"
# bibliography: 
# csl: 
prefer-html: true
author: 
     - name: Andrew Geneslaw
       degrees:
          - MD
          - MS
       orcid: 0000-0003-1859-2369
       email: asg2195@cumc.columbia.edu
       affiliations:
        - name: Columbia University Irving Medical Center
          department: Department of Pediatrics
          city: New York
          state: NY
          country: USA
          postal-code: 10032
format: 
     html:
          code-fold: true
          toc: true
          crossrefs-hover: true
          citations-hover: true
          code-tools:
               source: true
               toggle: false
               caption: none
     gfm:
          codeBlock: true
          toc: true
          crossref-hover: true
          citation: true
          codeTools:
               source: true
               toggle: false
               caption: none 
execute:
     echo: true
     warning: false
     cache: true
     
editor_options: 
  chunk_output_type: inline
  
engine: knitr
---

# Early mobilization retrospective analysis

This project will assess the delivery of physical therapy to critically ill children at the Morgan Stanley Children's Hospital in New York City. We are interested in whether physical therapy is being delivered within 72 hours of admission to the PICU. Physical therapy within 72 hours will be referred to from here out as "Early mobilization" or EM.

# Initial setup

## Loading libraries and data paths

```{r}
#| label: setup

library(chonyepicdata)
library(tidyverse)
library(lubridate)
library(janitor)
library(stringr)
library(gtsummary)
library(kableExtra)

options(scipen = 3)

# Load configuration files. You may need to edit the file (located in a config folder) with your own filepath.
# Alternately you can just send in the correct filename.
load_config(yml_path = 'config/config.yml', useglobal = TRUE)
# data_path <- data_path_chony

```

## Loading patients, encounters and PICU start/stop times

A patient has a medical record number (MRN) which is persistent across time.

A unique patient MRN can have multiple encounters. An encounter is defined by the variable \code{PAT_ENC_CSN_ID}, which has been renamed \code{PAT_ENC} for easier typing throughout this project. A patient encounter is a distinct encounter with the CHONY hospital system. An encounter can be inpatient, outpatient, ED, virtual, or not even involve patient contact (such as an attempt to call a patient that fails). For the purposes of this project, all encounters are an inpatient hospitalization. All encounters will have a start and stop date.

During a given hospital encounter ("admission"), a patient may move between multiple inpatient locations. These involve floor locations, PICUs, and operative areas. It also includes "virtual" areas, such as changing locations to a radiology area during a portable x-ray. The patient does not physically move in these circumstances and so we will mostly ignore them.

Because a patient can move multiple times between floor and PICU locations, a given hospital encounter might have multiple PICU admissions. We will break hospital encounters into individual PICU encounters, and each get a unique ID.

```{r}
#| label: load-data

# load all encounters
df_encounters <- load_encounters(paste0(data_path, fname_encounter))

# Remove any encounters that were for less than 24 hours
df_encounters <- df_encounters %>% 
     filter((hospital_discharge_date - hospital_admission_date)/ddays(1) >= 1)

enc_valid <- df_encounters %>% distinct(enc_id) %>% pull()

# Now get a set of all PICU start/stop datetimes for these encounters
df_picu_startstop <- get_picu_intervals(paste0(data_path, fname_adt)) %>%
     arrange(mrn, enc_id, icu_start_date)

# Remove encounters that were less than 24 hours
df_picu_startstop <- df_picu_startstop %>% 
     filter(enc_id %in% enc_valid)

# Remove PICU episodes that were less than 24 hours
df_picu_startstop <- df_picu_startstop %>% 
     filter((icu_stop_date - icu_start_date)/ddays(1) >= 1)

n_mrn <- distinct(df_encounters, mrn) %>% nrow()
n_encounters <- distinct(df_encounters, enc_id) %>% nrow()
n_picu <- distinct(df_picu_startstop, mrn, icu_start_date) %>% nrow() 

```

|       | PICU       | Encounters       | Patients  |
|-------|------------|------------------|-----------|
| **n** | `r n_picu` | `r n_encounters` | `r n_mrn` |

Since we are interested primarily in mobilization within the first 72 hours of ICU hospitalization, we should determine how many patients stayed for this long.

```{r}
#| label: 72 hour LOS

df_picu_stats <- df_picu_startstop %>% 
     mutate(los_picu = (icu_stop_date - icu_start_date)/ddays(1),
            los_picu_3days = if_else(los_picu >= 3, TRUE, FALSE))

df_encounter_stats <- df_encounters %>% 
     mutate(los_hosp = (hospital_discharge_date - hospital_admission_date)/ddays(1),
            los_hosp_3days = if_else(los_hosp >=3, TRUE, FALSE))

df_picu_stats %>% ggplot(aes(x = los_picu)) + 
     geom_histogram() + 
     scale_x_log10(n.breaks = 8) + 
     labs(x = 'Days (log10 axis)',
          y = 'N',
          title = 'PICU LOS')

df_encounter_stats %>% ggplot(aes(x = los_hosp)) + 
     geom_histogram() + 
     scale_x_log10(n.breaks = 8) + 
     labs(x = 'Days (log10 axis)',
          y = 'N',
          title = 'Hospital LOS')

kable(tabyl(df_picu_stats, los_picu_3days),
      format = "markdown", 
      align = "c",
      caption = "PICU admissions with PICU LOS at least 72 hours")

kable(tabyl(df_encounter_stats, los_hosp_3days), 
      format = "markdown", 
      align = "c",
      caption = "Encounters with hospital LOS at least 72 hours")

# df_stats <- left_join(df_picu_stats, df_encounter_stats)

```

## Invasive mechanical ventilation (IMV)

Understanding the numbers of patients receiving IMV, and the timing of IMV, is essential to the study.

First we will load data. This takes time, so we will separate it from other processing so it can be cached.

```{r}
#| label: load respiratory support

# Get ventilator data and just limit to patient encounters we are interested in
df_vent <- load_resp_support(paste0(data_path, fname_imv))
df_vent_wide <- clean_resp_support(df_vent)
df_resp_episodes <- classify_resp_support(df_vent_wide)

```

Now, we will get some counts.

```{r}
#| label: count IMV

# Only keep IMV data, and relabel each episode number
df_vent_episodes <- df_resp_episodes %>% filter(current_support == 'imv') %>%
     rename(vent_time_start = support_time_start,
            vent_time_stop = support_time_stop,
            vent_episode = support_episode) 

# Only keep vent episodes for at least 24 hours
df_vent_episodes <- df_vent_episodes %>% 
     filter(timediff >= hours(24)) %>% 
     group_by(enc_id) %>%
     arrange(vent_episode) %>%
     mutate(vent_episode = row_number()) %>%
     ungroup()

# Join based on encounter ID, and whether the intervals for (vent start, vent stop) and (icu start, icu stop) have any overlap. This ensures we include patients intubated in the ED or a procedural area
by <- join_by(enc_id, 
              overlaps(x$vent_time_start, x$vent_time_stop,
                       y$icu_start_date, y$icu_stop_date))

df_vent_episodes <- inner_join(df_vent_episodes, df_picu_startstop, by) %>%
     inner_join(df_encounters, by = c('mrn', 'enc_id')) %>% 
     relocate(mrn, enc_id)

# How many ventilator episodes, encounters, and among unique patients?
n_vent_ep <- df_vent_episodes %>% nrow()
n_vent_picu <- df_vent_episodes %>% distinct(icu_start_date) %>% nrow()
n_vent_mrn <- df_vent_episodes %>% distinct(mrn) %>% nrow()

display_array <- c(n_vent_ep, n_vent_picu, n_vent_mrn)
names(display_array) <- c('Episodes of IMV', 'PICU stays with IMV', 'Unique patients requiring IMV')

# display_table <- tibble(`Episodes of IMV` = n_vent_ep, 
       # `PICU stays with IMV` = n_vent_picu,
       # `Unique patients requiring IMV` = n_vent_mrn)

kable(display_array, 
      format = "markdown", 
      align = "c",
      caption = NULL,
      col.names = 'N')
```

## Physical therapy

Physical therapy is logged in flowsheets. For the most part, the physical therapists log the total amount of time they worked. Some physical therapists also log the specific activities they performed (such as gait training, wheel chair training, etc). This may or may not be consistent and will need some QAing.

```{r}
#| label: load PT

df_pt <- read_delim(paste0(data_path, '/Report 8F - Physical Therapy.txt'),
                    delim = "|",
                    escape_double = FALSE,
                    col_types = cols(PAT_ENC_CSN_ID = col_character(),
                                     MRN = col_character(),
                                     FLOWSHEET_NAME = col_character(),
                                     MEASURE_VALUE = col_number(),
                                     RECORDED_TIME = col_datetime(format = "%Y-%m-%d %H:%M:%S")),
                    trim_ws = TRUE) %>%
     clean_names() %>%
     select(mrn, enc_id = pat_enc_csn_id, everything()) %>%
     mutate(across(where(is.character), str_to_lower)) %>%
     mutate(across(where(is.character), ~ str_remove_all(.x, '^r nyc '))) %>%
     mutate(across(where(is.character), ~ str_remove_all(.x, '^r rhb '))) %>%
     mutate(across(where(is.character), ~ str_remove_all(.x, '^rhb ')))



# The variable "IP PT TIME CALCULATION" appears to be the total of all other
# types of PT being provided. The other units specify the PT being provided.

# Relevant types of PT rows...
relevant_pt <- c('therapeutic activity time entry',
                 'ip pt time calculation',
                 # 'pt received on',
                 'pt re-evaluation time entry',
                 'gait training time entry',
                 'neuromuscular re-education time entry',
                 'self care/home management (adls) time entry',
                 'therapeutic exercise time entry',
                 'therapeutic activity comments',
                 'therapeutic exercise comments',
                 # 'orthotic management training time entry',
                  'gait training comments',
                 # 'cognitive function direct pt contact',
                 'manual therapy time entry',
                 'orthotic/prosthetic management and/or training time entry',
                 # 'canalith repositioning time entry',
                 'wheelchair management time entry',
                 'pt eval treat tolerance',
                 # 'group therapy time entry',
                 'prosthetic training time entry',
                 'therapeutic massage time entry'
                 )
relevant_pt_str <- str_flatten(relevant_pt, collapse = '|')

# Keep only relevant kinds of PT
df_pt <- df_pt %>% filter(str_detect(flowsheet_name, relevant_pt_str))

# Make sure all types are numeric
df_pt <- df_pt %>% mutate(measure_value = as.numeric(measure_value))

# Remove any 0-time units
df_pt <- df_pt %>% filter(measure_value > 0)


# Convert to wide format
df_pt_wide <- df_pt %>%
     pivot_wider(id_cols = c('mrn', 'enc_id', 'recorded_time'),
                 names_from = flowsheet_name,
                 values_from = measure_value) %>%
     clean_names()

# Just keep a version with total time
df_pt_total <- df_pt_wide %>%
     select(mrn, enc_id, recorded_time, pt_time = ip_pt_time_calculation)

# Update the PICU start/stop so that it has a timestamp and intervals
# for 24, 48, and 72 hours
df_temp <- df_picu_startstop %>%
     mutate(t24 = icu_start_date + hours(24),
            int0_24 = interval(icu_start_date, t24),
            t48 = icu_start_date + hours(48),
            int24_48 = interval(t24 + minutes(1), t48),
            t72 = icu_start_date + hours(72),
            int48_72 = interval(t48 + minutes(1), t72),
            int0_72 = interval(icu_start_date, t72)
            )

# Create an inequality join so we make sure to only match PT that occurred after
# the PICU start
pt_join_by <- join_by(mrn, enc_id, y$recorded_time > x$icu_start_date)
df_pt_picu <- left_join(df_temp, df_pt_total, by = pt_join_by, relationship = "many-to-many")

# Determine whether patients had PT in each of the intervals
df_early_pt <- df_pt_picu %>%
     mutate(early_pt = if_else(recorded_time %within% int0_72, TRUE, FALSE)) %>%
     group_by(mrn, enc_id, icu_start_date) %>%
     filter(early_pt == max(early_pt)) %>%
     ungroup() %>%
     distinct(mrn, enc_id, icu_start_date, early_pt)

tabyl(df_early_pt, early_pt)

# What if we only look at the first PICU hospitalization?
df_early_pt_firstpicu <- df_pt_picu %>%
     mutate(early_pt = if_else(recorded_time %within% int0_72, TRUE, FALSE)) %>%
     group_by(mrn, enc_id) %>%
     filter(icu_start_date == min(icu_start_date)) %>%
     filter(early_pt == max(early_pt)) %>%
     ungroup() %>%
     distinct(mrn, enc_id, icu_start_date, early_pt)

tabyl(df_early_pt_firstpicu, early_pt)

# Now try to sum all the active types of PT
df_pt_active <- df_pt_wide %>%
     mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
     mutate(pt_active_time = gait_training_time_entry + therapeutic_exercise_time_entry + wheelchair_management_time_entry +
                 neuromuscular_re_education_time_entry + therapeutic_exercise_comments + gait_training_comments +
                 orthotic_prosthetic_management_and_or_training_time_entry + prosthetic_training_time_entry) %>%
     ungroup() %>%
     select(mrn, enc_id, recorded_time, pt_active_time) %>%
     filter(pt_active_time > 0)

# Do the same kind of inequality join as before, ensuring the PT is after PICU start
df_pt_active_picu <- left_join(df_temp, df_pt_active, by = pt_join_by, relationship = "many-to-many")

# Determine whether patients had PT in each of the intervals
df_early_pt_active <- df_pt_active_picu %>%
     mutate(early_pt_active = if_else(recorded_time %within% int0_72, TRUE, FALSE)) %>%
     group_by(mrn, enc_id, icu_start_date) %>%
     filter(early_pt_active == max(early_pt_active)) %>%
     ungroup() %>%
     distinct(mrn, enc_id, icu_start_date, early_pt_active)

tabyl(df_early_pt_active, early_pt_active)

```

There is a kind of variable called "PT received on" which is where the PT entered the date they supposedly provided PT. However, they always log PT when provided and there are multiple instances of the incorrect date being logged (such as a date in the future). Because of this, we will only use the date at the time PT was logged, rather than what the therapist manually entered. If we do need to use it, the date is recorded as the number of days after 12/31/1840 (unclear why). To convert this to a date, you can use:

``` R
mutate(pt_received_on = days(pt_received_on) + ymd('1840-12-31'))
```

There are also many kinds flowsheet rows being documented on. Not all are really relevant to our purposes. They are:

```{r}
#| label: PT flowsheet types


# Print all flowsheet names
df_pt %>% distinct(flowsheet_name) %>% print(n=Inf)

```
